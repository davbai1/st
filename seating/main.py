import streamlit as st
import pandas as pd
import plotly.express as px

# =============================================
# УТИЛИТА ДЛЯ ПАРСИНГА СПИСКА СТУДЕНТОВ ИЗ MULTILINE-СТРОКИ
# =============================================
def parse_students(raw: str) -> list[str]:
    """
    Преобразует многострочную строку,
    где каждое имя — на отдельной строке,
    в список имён без дополнительных кавычек.
    """
    return [line.strip() for line in raw.strip().splitlines() if line.strip()]

# =============================================
# НАСТРОЙКИ ЦВЕТОВ
# =============================================
OCCUPIED_COLOR = "#FF0000"   # цвет для занятых мест
EMPTY_COLOR    = "#808080"   # цвет для свободных мест

# =============================================
# КОНФИГУРАЦИЯ АУДИТОРИЙ
# =============================================
AUDITORIUM_101 = {
    "name": "Auditorium R503",
    "row_config": [
        ["desk","desk","gap","desk","desk","desk","desk","gap","desk","desk"],
        ["desk","desk","gap","desk","desk","desk","desk","gap","desk","desk"],
        ["desk","desk","gap","desk","desk","desk","desk","gap","desk","desk"],
        ["desk","desk","gap","desk","desk","desk","desk","gap","desk","desk"],
        ["desk","desk","gap","desk","desk","desk","desk","gap","desk","desk"],
        ["desk","desk","gap","desk","desk","desk","desk","gap","desk","desk"],
        ["desk","desk","gap","desk","desk","desk","desk","gap","desk","desk"],
    ],
    "skip_rows": [],  # здесь можете указывать пропускаемые ряды
    "students": parse_students("""
Арифулин Роберт Надирович
Боголаев Дмитрий Владимирович
Будыгин Сергей Викторович
Воробьева Виктория Марковна
Гайнуллина Аделя Халитовна
Горбуля Евгений Николаевич
Гузеватый Роман Александрович
Дубенский Константин Михайлович
Ермаков Андрей Михайлович
Козлов Сергей Андреевич
Купцов Максим Андреевич
Лисенкова Ульяна Александровна
Люманов Марк Этьенович
Мамакина Екатерина Владимировна
Маматказина Арина Ильнуровна
Михалин Святослав Денисович
Наполов Михаил Александрович
Никитина Екатерина Дмитриевна
Подледнев Никита Александрович
Савин Сергей Николаевич
Сотова Вероника Константиновна
Сушко Екатерина Андреевна
Фомин Иван Сергеевич
Шведов Владислав Романович
Шуб Сергей Алексеевич
Авдеев Евгений Сергеевич
Антропова Яна Андреевна
Аюпова Елизавета Валерьевна
Безруков Севастьян Глебович
Блинов Владимир Сергеевич
Братухин Никита Алексеевич
Васильев Егор Николаевич
Воробьёв Владимир Андреевич
Гурьева Полина Андреевна
Дегтяренко Мария Владимировна
Едалов Андрей Олегович
Зинкин Захар Юрьевич
Иванов Алексей Александрович
Кирзунова Алёна Олеговна
Колесников Андрей Алексеевич
Лукьянов Игорь Дмитриевич
Новосад Иван Алексеевич
Павлов Евгений Александрович
Родиков Максим Дмитриевич
Родионова Анна Михайловна
Сардак Павел Валерьевич
Силаев Тимофей Николаевич
Синяков Павел Сергеевич
Титов Максим Денисович
Фомичева Надежда Владимировна
Гергоков Мансур
Иванов Михаил Олегович
Биктибаев Аскар Сергеевич
Вдовикин Леонид Олегович
Вердиев Джамал Сарханович
Воробьев Михаил Андреевич
Гергоков Мансур
Гусейнов Гумбатали Натиг Оглы
Дороничева Полина Андреевна
Житников Платон
Зыков Кирилл Сергеевич
Иванов Михаил Олегович
Карапетян Артур Ашотович
Кротова Мария Яновна
Лащинина Екатерина Дмитриевна
Малык Анна Германовна
Милова Ирина Валерьевна
Муртазин Айрат Арманович
Нагоев Заур Шумафович
Нефедов Георгий Михайлович
Подолякина Анастасия Алексеевна
Попов Павел Глебович
Сайко Максим Витальевич
Сергиенко Арсентий Вячеславович
Соловьева Алиса Дмитриевна
Уваров Богдан Денисович
Хабибуллина Амира Рафаэлевна
Хамидуллин Амир Айдарович
Чурилов Иван Сергеевич
Шарифуллин Тимур Рамзилович
Шелепов Герман Александрович
Кузахметов Ильмир Ринатович
Майсурадзе Алеко Паатович
Суворова Александра Вячеславовна
Гурбанов Нихад Гисметович
Бобуа Андрей Борисович
Худяков Никита Александрович
Шварев Алексей Егорович
Яхудин Артём Владленович
Алов Владислав Васильевич
Артамонов Данила Александрович
Бессонов Григорий Александрович
"""),
    "manual_assignments": {
        (5, 16): "Бессонов Григорий Александрович",
        (4, 16): "Артамонов Данила Александрович",
        (3, 14): "Алов Владислав Васильевич",
        (3, 16): "Яхудин Артём Владленович",
        (2, 14): "Шварев Алексей Егорович",
        (6, 4):  "Гергоков Мансур",
        (5, 1):  "Уваров Богдан Денисович",
        (6, 3):  "Иванов Михаил Олегович",
        (6, 1):  "Зыков Кирилл Сергеевич",
        (6, 2):  "Карапетян Артур Ашотович",
        (4, 3):  "Кузахметов Ильмир Ринатович",
        (5, 4):  "Вердиев Джамал Сарханович",
        (6, 16): "Шелепов Герман Александрович",
        (7, 2):  "Мамакина Екатерина Владимировна",
        (7, 3):  "Бобуа Андрей Борисович",
        (7, 4):  "Гурбанов Нихад Гисметович",
        (5, 3):  "Биктибаев Аскар Сергеевич",
        (4, 1):  "Вдовикин Леонид Олегович",
        (4, 2):  "Воробьев Михаил Андреевич",
        (7, 1):  "Гусейнов Гумбатали Натиг Оглы",
        (4, 14): "Дороничева Полина Андреевна",
        (4, 4):  "Житников Платон",
        (5, 14): "Кротова Мария Яновна",
        (3, 1):  "Лащинина Екатерина Дмитриевна",
        (3, 2):  "Малык Анна Германовна",
        (5, 15): "Милова Ирина Владимировна",
        (3, 3):  "Муртазин Айрат Арманович",
        (3, 4):  "Нагоев Заур Шумафович",
        (7, 14): "Нефедов Георгий Михайлович",
        (4, 15): "Подолякина Анастасия Александровна",
        (6, 14): "Попов Павел Глебович",
        (2, 2):  "Сайко Максим Витальевич",
        (6, 15): "Сергиенко Арсентий Вячеславович",
        (7, 16): "Соловьева Алиса Дмитриевна",
        (2, 4):  "Хабибуллина Амира Рафаэлевна",
        (1, 1):  "Хамидуллин Амир Айдарович",
        (5, 2):  "Чурилов Иван Сергеевич",
        (1, 2):  "Шарифуллин Тимур Рамзилович",
        (1, 16): "Фомин Иван Сергеевич",
        (1, 4):  "Фомичева Надежда Владимировна",
        (1, 5):  "Майсурадзе Алеко Паатович",
        (1, 7):  "Суворова Александра Вячеславовна",
        (1, 11): "Будыгин Сергей Викторович",
        (2, 13): "Боголаев Дмитрий Владимирович",
        (2, 16): "Титов Максим Денисович",
        (1, 14): "Маматказина Арина Ильнуровна",
        (7, 6):  "Колесников Андрей Алексеевич",
        (7, 8):  "Силаев Тимофей Николаевич",
        (7, 10): "Сотова Вероника Константиновна",
        (7, 12): "Никитина Екатерина Дмитриевна",
        (6, 6):  "Лукьянов Игорь Дмитриевич",
        (6, 8):  "Наполов Михаил Александрович",
        (6, 10): "Блинов Владимир Сергеевич"
    }
}

# на первую Фомичева, Ибрагимова, Будыгин, Маркин, Савин, Майсурадзе Алеко Паатович
AUDITORIUM_201 = {
    "name": "Auditorium R505",
    "row_config": [
        ["gap","gap","gap","gap","desk","desk","desk"],
        ["desk","desk","gap","gap","desk","desk"],
        ["desk","desk","gap","gap","desk","desk"],
        ["desk","desk","gap","gap","desk","desk"],
        ["desk","desk","gap","gap","desk","desk"],
        ["desk","desk","gap","gap","desk","desk"]
    ],
    "skip_rows": [],
    "students": parse_students("""
Веревкин Роман Александрович
Вержбицкий Макар Алексеевич
Глебов Глеб Олегович
Полищук Александр Сергеевич
Картон Александр Александрович
Кораблина Майя Александровна
Кузнецов Максим Алексеевич
Леваньков Матвей Дмитриевич
Макогонова Ольга Павловна
Миняйцев Иван Васильевич
Островская Виктория Олеговна
Покровский Александр Андреевич
Серая Анастасия Дмитриевна
Смирнова Анастасия Денисовна
Сторожева Елизавета Олеговна
Тен Алексей Дмитриевич
Устьянцев Михаил Сергеевич
Холкин Арсений Дмитриевич
Шевелев Валентин Юрьевич
Тарасов Артём Эдуардович
Ибрагимова Таисия Сергеевна
Павлов Аркадий Сергеевич
Маркин Александр Андреевич
"""),
    "manual_assignments": {
        (1, 5): "Павлов Аркадий Сергеевич",
        (2, 1): "Купцов Максим Андреевич",
        (1, 1): "Ибрагимова Таисия Сергеевна",
        (6, 1): "Вержбицкий Макар Алексеевич",
        (3, 3): "Маркин Александр Андреевич",
        (2, 5): "Полищук Александр Сергеевич"
    }
}

# Ключи словаря должны совпадать со значениями в радио-кнопках
AUDITORIUMS = {
    "R503": AUDITORIUM_101,
    "R505": AUDITORIUM_201
}

# =============================================
# ФУНКЦИЯ РАССАДКИ С УЧЁТОМ skip_rows
# =============================================
def create_seating_chart(students, row_config, manual_assignments=None, skip_rows=None):
    if manual_assignments is None:
        manual_assignments = {}
    if skip_rows is None:
        skip_rows = []
    assignments = {}
    used = set()

    # 1) Ручные назначения (пропускаем skip_rows)
    for (r, s), name in manual_assignments.items():
        if r in skip_rows:
            continue
        if 1 <= r <= len(row_config):
            max_seats = sum(2 for c in row_config[r-1] if c == "desk")
            if 1 <= s <= max_seats:
                assignments[(r, s)] = name
                used.add(name)
            else:
                st.error(f"CONFIG ERROR: место {(r, s)} отсутствует в ряду {r}!")
        else:
            st.error(f"CONFIG ERROR: ряд {r} отсутствует!")

    # 2) Авто-рассадка по остальным рядам
    remaining = [x for x in students if x not in used]
    idx = 0
    for r_idx, cfg in enumerate(row_config, start=1):
        if r_idx in skip_rows:
            continue
        seats = sum(2 for c in cfg if c == "desk")
        for seat in range(1, seats+1, 2):
            key = (r_idx, seat)
            if key in assignments:
                continue
            if idx < len(remaining):
                assignments[key] = remaining[idx]
                idx += 1

    return assignments

# =============================================
# UI STREAMLIT
# =============================================
st.set_page_config(layout="wide", page_title="Seating Chart")
st.title("Seating in the exam on differential equations")

choice = st.radio(
    "Choose auditorium",
    options=list(AUDITORIUMS.keys()),
    format_func=lambda k: AUDITORIUMS[k]["name"],
    horizontal=True
)

aud = AUDITORIUMS[choice]
row_config = aud["row_config"]
skip_rows  = aud.get("skip_rows", [])
students   = aud["students"]
manual     = aud.get("manual_assignments", {})

assignments = create_seating_chart(
    students,
    row_config,
    manual_assignments=manual,
    skip_rows=skip_rows
)

# ==== ПОПРАВЛЕННАЯ ПРОВЕРКА ПЕРЕПОЛНЕНИЯ ====
total_seats = sum(
    sum(1 for c in row if c == "desk")
    for idx, row in enumerate(row_config, start=1)
    if idx not in skip_rows
)

st.subheader(aud["name"])

# =============================================
# СОСТАВЛЯЕМ СПИСОК ДЛЯ ВИЗУАЛИЗАЦИИ
# =============================================
rows = []
for r_idx, cfg in enumerate(row_config, start=1):
    col = 1
    seat = 1
    for item in cfg:
        if item == "desk":
            for _ in range(2):
                student   = assignments.get((r_idx, seat), "")
                help_text = f"{student} — seat {seat}" if student else ""
                rows.append({
                    "row": r_idx,
                    "col": col,
                    "help": help_text,
                    "occupied": bool(student)
                })
                seat += 1
                col  += 1
        else:
            col += 1

df = pd.DataFrame(rows)
df["marker_color"] = df["occupied"].map({
    True: OCCUPIED_COLOR,
    False: EMPTY_COLOR
})

# =============================================
# УВЕЛИЧЕНИЕ РАССТОЯНИЯ МЕЖДУ МАРКЕРАМИ
# =============================================
SPACING_X = 2
SPACING_Y = 1
df["col_spaced"] = df["col"] * SPACING_X
df["row_spaced"] = df["row"] * SPACING_Y

# =============================================
# РЕНДЕР С PLOTLY И ПОДПИСЬЮ
# =============================================
fig = px.scatter(
    df,
    x="col_spaced",
    y="row_spaced",
    hover_data=["help"],
    labels={"col_spaced": "", "row_spaced": "Row"},
    height=int(len(row_config) * 50 * SPACING_Y),
)
fig.update_traces(
    marker=dict(size=15, color=df["marker_color"]),
    showlegend=False,
    hovertemplate="%{customdata[0]}<extra></extra>"
)
fig.update_yaxes(
    showgrid=False,
    tickmode="array",
    tickvals=[i * SPACING_Y for i in range(1, len(row_config)+1)],
    ticktext=list(range(1, len(row_config)+1)),
    autorange=True
)
fig.update_xaxes(showgrid=False, showticklabels=False, zeroline=False)
fig.update_layout(
    margin=dict(l=20, r=20, t=20, b=80),
    dragmode=False,
    annotations=[{
        "text": "whiteboard",
        "x": 0.5, "xref": "paper",
        "y": -0.2, "yref": "paper",
        "showarrow": False,
        "font": {"size": 12}
    }]
)
st.plotly_chart(fig, use_container_width=True)

# =============================================
# ТАБЛИЦА РАССАДКИ
# =============================================
st.subheader("Student seating table")
table = [
    {"Name": nm, "Place": f"Row {r}, Seat {s}"}
    for (r, s), nm in assignments.items()
]
st.dataframe(pd.DataFrame(table), hide_index=True, use_container_width=True)
